import matplotlib.pyplot as plt
from operator import itemgetter
import networkx as nx 

###
### Problem 1
###

# create romeo-and-juliet graph
rj = nx.Graph()

# add nodes and edges on rj graph
rj.add_edge("Juliet", "Nurse")
rj.add_edge("Juliet","Capulet")
rj.add_edge("Juliet","Tybalt")
rj.add_edge("Juliet","Romeo")
rj.add_edge("Juliet","Friar Laurence")
rj.add_edge("Capulet","Tybalt")
rj.add_edge("Capulet","Paris")
rj.add_edge("Capulet","Escalus")
rj.add_edge("Romeo","Friar Laurence")
rj.add_edge("Romeo","Benvolio")
rj.add_edge("Romeo","Montague")
rj.add_edge("Romeo","Mercutio")
rj.add_edge("Escalus","Mercutio")
rj.add_edge("Escalus","Paris")
rj.add_edge("Escalus","Montague")
rj.add_edge("Benvolio","Montague")
rj.add_edge("Paris","Mercutio")

# test the number of nodes and edges
assert len(rj.nodes()) == 11
assert len(rj.edges()) == 17

# test shape of Romeo-and-Juliet graph
assert set(rj.neighbors("Nurse")) == set(["Juliet"])
assert set(rj.neighbors("Friar Laurence")) == set(["Juliet", "Romeo"])
assert set(rj.neighbors("Tybalt")) == set(["Juliet", "Capulet"])
assert set(rj.neighbors("Benvolio")) == set(["Romeo", "Montague"])
assert set(rj.neighbors("Paris")) == set(["Escalus", "Capulet", "Mercutio"])
assert set(rj.neighbors("Mercutio")) == set(["Paris", "Escalus", "Romeo"])
assert set(rj.neighbors("Montague")) == set(["Escalus", "Romeo", "Benvolio"])
assert set(rj.neighbors("Capulet")) == \
    set(["Juliet", "Tybalt", "Paris", "Escalus"])
assert set(rj.neighbors("Escalus")) == \
    set(["Paris", "Mercutio", "Montague", "Capulet"])
assert set(rj.neighbors("Juliet")) == \
    set(["Nurse", "Tybalt", "Capulet", "Friar Laurence", "Romeo"])
assert set(rj.neighbors("Romeo")) == \
    set(["Juliet", "Friar Laurence", "Benvolio", "Montague", "Mercutio"])

def draw_rj():
    """Draw the rj graph to the screen and to a file.
    """
    nx.draw_networkx(rj)
    plt.savefig("romeo-and-juliet.pdf")
    plt.show()

draw_rj()


###
### Problem 2
###

def friends(graph, user):
    """Returns a set of the friends of the given user, in the given graph.
    """

    return set(graph.neighbors(user))

assert friends(rj, "Mercutio") == set(['Romeo', 'Escalus', 'Paris'])


def friends_of_friends(graph, user):
    """Returns a set of friends of friends of the given user, in the given 
    graph. The result does not include the given user nor any of that user's
    friends.
    """
  
    result = set()
    # find the friends of user and put them in a set
    u_friends = set(graph.neighbors(user))

    # finds the friends of friends 
    for name in u_friends:
        name = friends(graph, name)
        for i in name:
            # exclude user's friends and user himself 
            if i not in u_friends and i != user:
                result.add(i)
                       
    return result      
  
assert friends_of_friends(rj, "Mercutio") == \
    set(['Benvolio', 'Capulet', 'Friar Laurence', 'Juliet', 'Montague'])


def common_friends(graph, user1, user2):
    """Returns the set of friends that user1 and user2 have in common.
    """

    result = set()
    
    for i in friends(graph, user1):
        for j in friends(graph, user2):
            if i == j:
                result.add(i)
         
    return result

assert common_friends(rj, "Mercutio", "Nurse") == set()
assert common_friends(rj, "Mercutio", "Romeo") == set()
assert common_friends(rj, "Mercutio", "Juliet") == set(["Romeo"])
assert common_friends(rj, "Mercutio", "Capulet") == set(["Escalus", "Paris"])


def number_of_common_friends_map(graph, user):
    """Returns a map (a dictionary), mapping from each user U to the number 
    of friends U has in common with the given user. The map keys are the 
    users who have at least one friend in common with the given user, 
    and are neither the given user nor one of the given user's friends.
    Here is what should be returned:
      number_of_common_friends_map(my_graph, "A")  =>   { 'B':2, 'C':1 }
    """

    common_dict = {}
    # find the friends of friends for user
    u_friends = friends_of_friends(graph, user) 
    
    for i in u_friends:
        # count the number of their common friends 
        value = len(common_friends(graph, user, i))
        common_dict.update({i:value})
    
    return common_dict

assert number_of_common_friends_map(rj, "Mercutio") == \
    { 'Benvolio': 1, 'Capulet': 2, 'Friar Laurence': 1, 
      'Juliet': 1, 'Montague': 2 }


def number_map_to_sorted_list(map_with_number_vals):
    """Given map_with_number_vals, a dictionary whose values are numbers, 
    return a list of the keys in the dictionary.
    The keys are sorted by the number value they map to, from greatest
    number down to smallest number.
    When two keys map to the same number value, the keys are sorted by their
    natural sort order for whatever type the key is, from least to greatest.
    """

    key_list = []
    
    # sort the items in given dict according to its index 0 -- letter
    a = sorted(map_with_number_vals.items(), key=itemgetter(0))
    # then sort the value in descending order
    b = sorted(a, key=itemgetter(1), reverse=True)
    for i in b:
        key_list.append(i[0])
    
    return key_list

assert number_map_to_sorted_list({"a":5, "b":2, "c":7, "d":5, "e":5}) == \
    ['c', 'a', 'd', 'e', 'b']


def recommend_by_number_of_common_friends(graph, user):
    """Return a list of friend recommendations for the given user.
    The friend recommendation list consists of names/IDs of people in
    the graph who are not yet a friend of the given user.  The order
    of the list is determined by the number of common friends (people
    with the most common friends are listed first).  In the
    case of a tie in number of common friends, the names/IDs are
    sorted by their natural sort order, from least to greatest.
    """
    
    recommend_friends = number_of_common_friends_map(graph, user)
    
    # sort the recommendation results according to the number of common friends
    results = number_map_to_sorted_list(recommend_friends)
    
    return results

assert recommend_by_number_of_common_friends(rj, "Mercutio") == \
    ['Capulet', 'Montague', 'Benvolio', 'Friar Laurence', 'Juliet']


###
### Problem 3
###

def influence_map(graph, user):
    """Returns a map (a dictionary) mapping from each person P to their 
    influence score, with respect to the given user. The map only 
    contains people who have at least one friend in common with the given 
    user and are neither the user nor one of the users's friends. 
    See the assignment for the definition of influence scores.
    """
    influence_dict = {}
    u_friends = friends_of_friends(graph, user)
    common = []   
    
    for i in u_friends: 
        common.append(common_friends(graph, user, i))
        for j in common:
            score = 0
            for n in j:
                score = score + 1/len(friends(graph, n))
                influence_dict.update({i:score})
            
    return influence_dict

assert influence_map(rj, "Mercutio") == \
    { 'Benvolio': 0.2, 'Capulet': 0.5833333333333333, 
      'Friar Laurence': 0.2, 'Juliet': 0.2, 'Montague': 0.45 }


def recommend_by_influence(graph, user):
    """Return a list of friend recommendations for the given user.
    The friend recommendation list consists of names/IDs of people in
    the graph who are not yet a friend of the given user.  The order
    of the list is determined by the influence score (people
    with the biggest influence score are listed first).  In the
    case of a tie in influence score, the names/IDs are sorted
    by their natural sort order, from least to greatest.
    """

    influence_sort = number_map_to_sorted_list(influence_map(graph, user))
    
    return(influence_sort)

assert recommend_by_influence(rj, "Mercutio") == \
    ['Capulet', 'Montague', 'Benvolio', 'Friar Laurence', 'Juliet']


###
### Problem 4
###

same_result = []
diff_result = []

for node in rj.nodes():
    r1 = recommend_by_number_of_common_friends(rj, node)
    r2 = recommend_by_influence(rj, node)
    if r1 == r2:
        same_result.append(node)
    else:
        diff_result.append(node)
 
print("Unchanged Recommendations:", same_result)
print("Changed Recommendations:", diff_result)


###
### Problem 5
###

'''
Apply the above function to facebook data
'''

facebook = nx.Graph()

fb_file = open("facebook-links.txt", "r")

users=[]
for lines in fb_file:
    users.append(lines)
 
for node in users:
    facebook.add_edge(int(node.split()[0]),int(node.split()[1]))
        
fb_file.close()

assert len(facebook.nodes()) == 63731
assert len(facebook.edges()) == 817090


###
### Problem 6
###

for user in facebook.nodes():
    # for int structure, use mode to find userID which can be divided by 1000
    if user % 1000 == 0:
        result_num = recommend_by_number_of_common_friends(facebook, user)

        # [0:10] means print only first 10 results
        print(user , '(by number_of_common_friends):' , result_num[0:10])


###
### Problem 7
###
    
for user in facebook.nodes():
    if user % 1000 == 0:
        result_influ = recommend_by_influence(facebook, user)

        print(user , '(by influence):' , result_influ[0:10])


###
### Problem 8
###

same_result = []
diff_result = []

for user in facebook.nodes():
    if user % 1000 == 0:
        r1 = recommend_by_number_of_common_friends(facebook, user)[0:10]
        r2 = recommend_by_influence(facebook, user)[0:10]
        if r1 == r2:
            same_result.append(user)
        else:
            diff_result.append(user)
 
# print just the number of results
print("Same:", len(same_result))
print("Different:", len(diff_result))
